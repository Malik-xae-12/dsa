class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        boolean[] use= new boolean[nums.length];
        backtrack(nums,result,temp,use);
        return result;
    }
    public static void  backtrack(int[] nums,List<List<Integer>> result,List<Integer> temp,boolean[] use){
        if(temp.size()==nums.length && !result.contains(temp)){
            result.add(new ArrayList<>(temp));
            return;
        }
        for(int i=0;i<nums.length;i++){
            if(use[i]){
                continue;
            }
            use[i]=true;
            temp.add(nums[i]);
            backtrack(nums,result,temp,use);
            use[i]=false;
            temp.remove(temp.size()-1);
        }
    }

}
